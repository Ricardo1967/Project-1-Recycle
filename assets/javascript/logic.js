// Logic starts once the DOM is loaded complete
$(document).ready(function () { 

    var materialR = 0;
    var map = 0;
    var late;
    var lnge;

    //When the button is clicked, grabs the information from the input boxes
    $("#submitBtn").click(function geocode(event){
            event.preventDefault();
            var zipCode = $("#zipInput").val().trim();  // Grabs value input by user
            materialR = $("#materialInput");
            materialR.val(materialR.val().trim() + "+recycling"); // Grabs value input by user and add the word +recycling
    
            axios.get('https://maps.googleapis.com/maps/api/geocode/json', { //axios allow us to get access and response to google apis
                params: {
                    address:zipCode, //Zip Code entered by user
                    key:'AIzaSyCewNtEX9C_9wLxAOvKyTmjT8pV0NJYC_o' //API Key
                },
            })
            .then(function(response){
                console.log(response);
    
                var formattedAddress = response.data.results[0].formatted_address;
                late = response.data.results[0].geometry.location.lat; //latitude generated by API BASED on entered zipcode
                lnge = response.data.results[0].geometry.location.lng; //longitude generated by BASED on entered zipcode
                
                // console.log(late, lnge, response.data.results[0].geometry.location); //TESTING Stage
               
                initMap(late, lnge, materialR); // Calling Function Init Map, to pass values of local variables as arguments to other function.

                $("#zipInput").val(''); //Empties input box
                $("#materialInput").val(''); //Empties input box
            });
            var queryURL = "https://www.googleapis.com/customsearch/v1?key=AIzaSyBoFD4dhfsyEkbmiFi9WP-ZgnsgURasJ04&cx=017576662512468239146:omuauf_lfve&q=how+to+recycle+" + materialR;
    
            $.ajax({
                url: queryURL,
                method: "GET"
              }).then(function(response) {
                  console.log(response);
                  
                  
                  for(var i=0; i<response.items.length; i++){
    
                    $("#addCardsHere").append("<div class='card cardsNum-" + i + "' style='width:300px;'> " );
    
                    $(".cardsNum-" + i + "").append("<div class='card-divider' id='title-" +i + "'><h4>" + response.items[i].htmlTitle +"</h4>"); 
    
    
                    $(".cardsNum-" + i + "").append("<a href='"+ response.items[i].link + "' id='link"+ i + " '>Read Article</a>");
                    //$(".card").append("<div class='card-section' id='link" + i + "'>" +response.items[i].link );
    
                    $(".cardsNum-" + i + "").append("<div class='card-section' id='descript" + i + "'>" +response.items[i].snippet );
                
                   
                }
                
              });

        });
    
});


var map;
var service;
var infoWindow;

function initMap(latit, lomgit, materialtoR) { // initMap is the function to load the GOOGLE MAPS, latit, lomgit, materialtoR, are just arguments, can be named in other ways
    
    var userLocation = new google.maps.LatLng(latit,lomgit); // Uses Lat and Lng, generated byt the API, based on the zipcode to start the map in the USER's Location

    
    // console.log(latit, lomgit, materialtoR); //Just testing tha values were transfered from function to function
       
    map = new google.maps.Map(document.getElementById('map'),{ //This line is what ACTUALLY GENERATES the MAP,
        center: userLocation, // Uses Lat and Lng stored in userLocation variable
        zoom: 12 // Amount of zoom predefined for map
    });

    var request = { // The Request are the parameters that we pass to the API, to expect a response
        location: userLocation, // User ZipCode
        radius: 500, // From the zipCode 500 something radius
        query: materialtoR // Argument passed from on click function, basically material to recycle + recycling string
    };

    service = new google.maps.places.PlacesService(map); //Initializing the Places Services from maps API
   
    service.textSearch(request, callback); // Once services is initalized, its going to look for the parameters we assigned above in our REQUEST variable, and run a CALLBACK


 var marker = new google.maps.Marker({ //This local marker variable will show a FLAG, in the center of the provided zipCode
     position: {lat:latit, lng:lomgit},
     map:map,
     icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'
 });


}
function callback(results, status){ 
    console.log(results); // TEST
    if(status == google.maps.places.PlacesServiceStatus.OK){ //If status is OK, its going to go throug results in a for loop, THE AMOUNT OF RESULTS IS RESTRICTED BY GOOGLE AND MONEY
        for(var i = 0; i < results.length; i++){
            var place = results[i];
            createMarker(place); // Passing value of the variable place to create Marker function
        }
    }
}

function createMarker(place){
    var marker = new google.maps.Marker({ // Initializing the marker services from google maps API
        map: map,
        position: place.geometry.location, // Declaring the position form the zip provided, GEOMETRY is the element within the object that provides lat and Lng

    });
    google.maps.event.addListener(marker, 'click', function() {
        infoWindow = new google.maps.InfoWindow(); // InfoWindow is every little popup window that appears after clicking the Marke. SHOULD SHOW INFORMATION, BUT DOESN'T WORK
        var request = {         // Parameters requested to maps google API 
            placeId: place.place_id,
            fields: ['name', 'rating', 'formatted_phone_number', 'formatted_address', 'geometry']
        
        };
    
        service.getDetails(request, function(result, status) {
          if (status !== google.maps.places.PlacesServiceStatus.OK) {
            console.error(status);
            return;
          }
          infoWindow.setContent(result.name, result.formatted_address); // Sets the content to be shown in the INFOWINDOW
          infoWindow.open(map, marker);
        });
      });
}

//Starts JAVASCRIPT logic, once the DOM is ready, and fully loaded
    